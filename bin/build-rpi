#!/bin/sh

X_SRCDIR=/home/adrian/work/freebsd/head-arm/src
X_OBJDIR=/home/adrian/work/freebsd/head-arm/obj
X_ROOTDIR=/home/adrian/work/freebsd/head-arm/root
X_WORKDIR=/home/adrian/work/freebsd/head-arm

X_LCLDIR="`dirname $0`/../"

# TODO:
# * /etc/ttys needs customising
# * there's nothing that's automatically setting the rootfs
#   to ufs:mmcsd0s2a ; need to figure that out
# * .. why don't I see console booting?
# * need to copy in the compiled fdt into rpigoo before
#   the boot environment is made.
# The console is still the UART
# Need to populate /etc/fstab and /etc/ttys from crochet
# need to make /boot/msdos to have crochet's fstab mount things
#  during boot.

case $1 in
	'build')
		touch ${X_WORKDIR}/make.conf
		touch ${X_WORKDIR}/src.conf
		env \
		    MAKEOBJDIRPREFIX=${X_OBJDIR} \
		    make -j4 -s buildworld buildkernel \
		    __MAKE_CONF=${X_WORKDIR}/make.conf \
		    SRCCONF=${X_WORKDIR}/src.conf KERNCONF=RPI-B \
		    UBLDR_LOADADDR=0x01000000 \
		    TARGET_ARCH=armv6 || exit 1
		echo "** Done."
		exit 0
	;;
	'build-fdt')
		env \
		    MAKEOBJDIRPREFIX=${X_OBJDIR} \
		    make -s builddtb FDT_DTS_FILE=rpi.dts \
		    __MAKE_CONF=${X_WORKDIR}/make.conf \
		    SRCCONF=${X_WORKDIR}/src.conf KERNCONF=RPI-B \
		    UBLDR_LOADADDR=0x01000000 \
		    TARGET_ARCH=armv6 || exit 1
		echo "** Done."
		exit 0
	;;
	'install')
		mkdir -p ${X_ROOTDIR} || exit 1
		env \
		    MAKEOBJDIRPREFIX=${X_OBJDIR} \
		    make -s installworld installkernel distribution \
		    __MAKE_CONF=${X_WORKDIR}/make.conf \
		    SRCCONF=${X_WORKDIR}/src.conf \
		    KERNCONF=RPI-B \
		    NO_ROOT=yes TARGET_ARCH=armv6 \
		    DESTDIR=${X_ROOTDIR} || exit 1
		echo "** Done."
		exit 0
	;;
	'install-custom')
		METALOG_FILE=${X_ROOTDIR}/METALOG.ADD
		rm -f ${METALOG_FILE}

		# FreeBSD-HEAD install: knows about -U and metalog..
		install -d -U -M ${METALOG_FILE} -D ${X_ROOTDIR} -o root -g wheel -S -m 0755 ${X_ROOTDIR}/boot/msdos
		install -U -M ${METALOG_FILE} -D ${X_ROOTDIR} -o root -g wheel -S -m 0644 ${X_LCLDIR}/files/rpi/root/etc/ttys ${X_ROOTDIR}/etc
		install -U -M ${METALOG_FILE} -D ${X_ROOTDIR} -o root -g wheel -S -m 0644 ${X_LCLDIR}/files/rpi/root/etc/fstab ${X_ROOTDIR}/etc
		install -U -M ${METALOG_FILE} -D ${X_ROOTDIR} -o root -g wheel -S -m 0644 ${X_LCLDIR}/files/rpi/root/etc/rc.conf ${X_ROOTDIR}/etc
		install -U -M ${METALOG_FILE} -D ${X_ROOTDIR} -o root -g wheel -S -m 0644 ${X_LCLDIR}/files/rpi/root/boot/loader.rc ${X_ROOTDIR}/boot

		# Ok, now we have to populate a new METALOG based on
		# what's in the result from 'installworld/installkernel'
		# and the above file.
		${X_LCLDIR}/bin/filter.pl ${X_ROOTDIR}/METALOG ${METALOG_FILE} ${X_ROOTDIR}/METALOG.NEW

		echo "*** Done."
		exit 0
		;;
	'install-boot')
		# Populate the boot workdir with the files we're going to
		# put in the MSDOS image
		# (Pre-built uboot, etc)
		mkdir -p ${X_WORKDIR}/boot/ || exit 1
		cp -v ${X_LCLDIR}/files/rpi/boot/* ${X_WORKDIR}/boot/

		# Populate the boot dir with the ubldr from the rootdir
		# XXX TODO: DTS, once it's built/installed as part of the buildkernel/installkernel :(
		cp -v ${X_ROOTDIR}/boot/ubldr ${X_WORKDIR}/boot/

		echo "*** Done."
		exit 0
	;;
	'boot-image')
		# Build MSDOS image
		dd if=/dev/zero of=${X_WORKDIR}/boot.img bs=1m count=32
		newfs_msdos ${X_WORKDIR}/boot.img

		# Populate MSDOS image
		for i in `ls ${X_WORKDIR}/boot`; do
			mcopy -i ${X_WORKDIR}/boot.img "${X_WORKDIR}/boot/${i}" "::${i}"
		done
		echo "*** Done."
		exit 0
	;;
	'clean-boot')
		rm -rf ${X_WORKDIR}/boot/ || exit 1
		echo "*** Done."
		exit 0
	;;
	'root-image')
		# For now, 800M image, so we fit in 1G!
		# .. we'll grow later at boot time.
		makefs -t ffs -o version=2 -F ${X_ROOTDIR}/METALOG.NEW -B le -m 838860800 -M 838860800 -f 800000 -x ${X_WORKDIR}/rootfs.img ${X_ROOTDIR}
		echo "*** Done."
		exit 0
	;;
	'full-image')
		# Ok, join together, using the cascading mkimg thingy from the manpage
		MKIMG_PARAMS="-H 255 -P 512 -T 63 -v"
		# mkimg ${MKIMG_PARAMS} -s mbr -p "fat32:=${X_WORKDIR}/boot.img" -p "freebsd:=${X_WORKDIR}/rootfs.img" -o "${X_WORKDIR}/r-pi.img"
		MKIMG_INNER="mkimg -s bsd -p \"freebsd-ufs:=${X_WORKDIR}/rootfs.img\""
		mkimg ${MKIMG_PARAMS} -s mbr -p "fat32:=${X_WORKDIR}/boot.img" -p "freebsd:-${MKIMG_INNER}" -o "${X_WORKDIR}/r-pi.img"
		echo "*** Done."
		exit 0
	;;
	'clean-obj')
		rm -rf ../obj
		rm ${X_WORKDIR}/make.conf
		rm ${X_WORKDIR}/src.conf
		echo "*** Done."
		exit 0
	;;
	'clean-root')
		rm -rf ../root
		echo "*** Done."
		exit 0
	;;
	'clean-img')
		rm ${X_WORKDIR}/boot.img
		rm ${X_WORKDIR}/rootfs.img
		echo "** Done."
		exit 0
	;;
	*)
		echo "Usage: $0 build|install|other-stuff-read-the-script"
		exit 127
		;;
esac
